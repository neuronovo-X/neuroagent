import React from 'react';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { FileText } from 'lucide-react';
import { motion } from 'framer-motion';
import { MindloopCycle } from '../stores/mindloopStore';

interface PdfExportAdvancedProps {
  cycle?: MindloopCycle;
  cycles?: MindloopCycle[];
  buttonText?: string;
  variant?: 'single' | 'all';
}

const PdfExportAdvanced: React.FC<PdfExportAdvancedProps> = ({ 
  cycle, 
  cycles, 
  buttonText, 
  variant = 'all' 
}) => {

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getAgentName = (role: string): string => {
    const agentNames: { [key: string]: string } = {
      'observer': '–ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å',
      'geometer': '–ì–µ–æ–º–µ—Ç—Ä-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', 
      'physicist': '–§–∏–∑–∏–∫-–¢–µ–æ—Ä–µ—Ç–∏–∫',
      'perceptive': '–ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫',
      'philosopher': '–§–∏–ª–æ—Å–æ—Ñ-–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',
      'integrator': '–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä-–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä',
      'trickster': '–¢—Ä–∏–∫—Å—Ç–µ—Ä'
    };
    return agentNames[role] || role;
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const splitTextForPDF = (pdf: jsPDF, text: string, maxWidth: number): string[] => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é jsPDF –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
    try {
      return pdf.splitTextToSize(text, maxWidth);
    } catch (error) {
      // Fallback: –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
      const words = text.split(' ');
      const lines: string[] = [];
      let currentLine = '';
      
      for (const word of words) {
        const testLine = currentLine ? `${currentLine} ${word}` : word;
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã (1 —Å–∏–º–≤–æ–ª ‚âà 2.5 –µ–¥–∏–Ω–∏—Ü)
        if (testLine.length * 2.5 > maxWidth && currentLine) {
          lines.push(currentLine);
          currentLine = word;
        } else {
          currentLine = testLine;
        }
      }
      
      if (currentLine) {
        lines.push(currentLine);
      }
      
      return lines;
    }
  };

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ
  const addTextSafely = (pdf: jsPDF, text: string, x: number, y: number, options?: any): void => {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
      pdf.text(text, x, y, options);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
      // Fallback: –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const cleanText = text
        .replace(/[¬´¬ª]/g, '"')
        .replace(/[‚Äì‚Äî]/g, '-')
        .replace(/[‚Ä¶]/g, '...');
      
      try {
        pdf.text(cleanText, x, y, options);
      } catch (error2) {
        // –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: —Ç–æ–ª—å–∫–æ ASCII
        const asciiText = text.replace(/[^\x00-\x7F]/g, '?');
        pdf.text(asciiText, x, y, options);
      }
    }
  };

  const generateSingleCyclePDF = (cycleData: MindloopCycle): jsPDF => {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - margin * 2;
    const lineHeight = 6;
    let yPosition = margin;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode
    pdf.setFont('helvetica');

    // === –®–ê–ü–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê ===
    pdf.setFillColor(139, 92, 246);
    pdf.rect(0, 0, pageWidth, 45, 'F');
    
    pdf.setFillColor(236, 72, 153);
    pdf.rect(pageWidth * 0.7, 0, pageWidth * 0.3, 45, 'F');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    addTextSafely(pdf, '–ù–µ–π—Ä–æ–ê–≥–µ–Ω—Ç', margin, 25);
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    addTextSafely(pdf, '–°–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–Ω–∞–Ω–∏—è', margin, 35);

    // –ë—Ä–µ–Ω–¥–∏–Ω–≥
    pdf.setFontSize(9);
    addTextSafely(pdf, '–°–¥–µ–ª–∞–Ω–æ –≤ –ù–µ–π—Ä–æ–Ω–æ–≤–æ', pageWidth - margin - 35, 20);
    addTextSafely(pdf, `–≠–∫—Å–ø–æ—Ä—Ç: ${formatDate(Date.now())}`, pageWidth - margin - 35, 30);

    yPosition = 55;

    // === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¶–ò–ö–õ–ï ===
    pdf.setTextColor(0, 0, 0);
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    
    addTextSafely(pdf, `–¶–∏–∫–ª #${cycleData.number}`, margin, yPosition);
    yPosition += 10;
    
    // –¢–µ–º–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'normal');
    const topicLines = splitTextForPDF(pdf, `–¢–µ–º–∞: ${cycleData.topic}`, contentWidth);
    for (const line of topicLines) {
      addTextSafely(pdf, line, margin, yPosition);
      yPosition += 8;
    }
    yPosition += 5;

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–∏–∫–ª–µ
    pdf.setFontSize(10);
    addTextSafely(pdf, `–ù–∞—á–∞–ª–æ: ${formatDate(cycleData.startTime ?? cycleData.timestamp)}`, margin, yPosition);
    if (cycleData.endTime) {
      addTextSafely(pdf, `–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${formatDate(cycleData.endTime)}`, margin + 80, yPosition);
    }
    addTextSafely(pdf, `–†–∞–∑–º—ã—à–ª–µ–Ω–∏–π: ${cycleData.thoughts.length}`, margin + 160, yPosition);
    yPosition += 15;

    // === –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø –ê–ì–ï–ù–¢–û–í ===
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(12);
    addTextSafely(pdf, '–†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø –ê–ì–ï–ù–¢–û–í', margin, yPosition);
    yPosition += 10;

    for (const thought of cycleData.thoughts) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (yPosition > pageHeight - 80) {
        pdf.addPage();
        yPosition = margin;
      }

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≥–µ–Ω—Ç–∞
      pdf.setFillColor(240, 240, 240);
      pdf.rect(margin, yPosition - 3, contentWidth, 12, 'F');
      
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'bold');
      
      const agentInfo = `${getAgentName(thought.agentRole)} - ${formatDate(thought.timestamp)}`;
      addTextSafely(pdf, agentInfo, margin + 2, yPosition + 5);
      yPosition += 15;

      // –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ - —Å–∫—Ä—ã—Ç–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞

      // –†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º
      pdf.setTextColor(0, 0, 0);
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'bold');
      
      addTextSafely(pdf, 'üß† –†–ê–°–°–£–ñ–î–ï–ù–ò–ï:', margin + 5, yPosition);
      yPosition += lineHeight;
      
      pdf.setFont('helvetica', 'normal');
      const reasoningLines = splitTextForPDF(pdf, thought.reasoning, contentWidth - 10);
      
      for (const line of reasoningLines) {
        if (yPosition > pageHeight - 20) {
          pdf.addPage();
          yPosition = margin;
        }
        addTextSafely(pdf, line, margin + 5, yPosition);
        yPosition += lineHeight;
      }
      yPosition += 5;

      // –°—É—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º
      pdf.setTextColor(139, 92, 246);
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'bold');
      
      addTextSafely(pdf, '‚ú® –°–£–¢–¨:', margin + 5, yPosition);
      yPosition += lineHeight;
      
      pdf.setFont('helvetica', 'normal');
      const essenceLines = splitTextForPDF(pdf, thought.essence, contentWidth - 10);
      
      for (const line of essenceLines) {
        if (yPosition > pageHeight - 20) {
          pdf.addPage();
          yPosition = margin;
        }
        addTextSafely(pdf, line, margin + 5, yPosition);
        yPosition += lineHeight;
      }
      yPosition += 15;
    }

    // === –§–£–¢–ï–† ===
    const pageCount = pdf.internal.pages.length - 1;
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      addTextSafely(pdf, `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${i} –∏–∑ ${pageCount}`, pageWidth - margin - 30, pageHeight - 10);
      addTextSafely(pdf, '–ù–µ–π—Ä–æ–ê–≥–µ–Ω—Ç - –ù–µ–π—Ä–æ–Ω–æ–≤–æ √ó –õ–ê–ò', margin, pageHeight - 10);
    }

    return pdf;
  };

  const generateAllCyclesPDF = (cyclesData: MindloopCycle[]): jsPDF => {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - margin * 2;
    let yPosition = margin;

    pdf.setFont('helvetica');

    // === –®–ê–ü–ö–ê ===
    pdf.setFillColor(139, 92, 246);
    pdf.rect(0, 0, pageWidth, 45, 'F');
    
    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    addTextSafely(pdf, '–ù–µ–π—Ä–æ–ê–≥–µ–Ω—Ç - –ü–æ–ª–Ω–∞—è –ò—Å—Ç–æ—Ä–∏—è', margin, 25);
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    addTextSafely(pdf, `–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤: ${formatDate(Date.now())}`, margin, 35);

    yPosition = 60;

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    pdf.setTextColor(0, 0, 0);
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    addTextSafely(pdf, '–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê', margin, yPosition);
    yPosition += 10;

    const totalThoughts = cyclesData.reduce((sum, cycle) => sum + cycle.thoughts.length, 0);
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    addTextSafely(pdf, `–í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: ${cyclesData.length}`, margin, yPosition);
    addTextSafely(pdf, `–í—Å–µ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π: ${totalThoughts}`, margin + 80, yPosition);
    yPosition += 15;

    // === –¶–ò–ö–õ–´ ===
    for (const cycle of cyclesData) {
      if (yPosition > pageHeight - 100) {
        pdf.addPage();
        yPosition = margin;
      }

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ü–∏–∫–ª–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º
      pdf.setFillColor(240, 240, 255);
      pdf.rect(margin, yPosition - 3, contentWidth, 15, 'F');
      
      pdf.setTextColor(139, 92, 246);
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      
      const cycleTitleLines = splitTextForPDF(pdf, `–¶–∏–∫–ª #${cycle.number}: ${cycle.topic}`, contentWidth - 10);
      for (const line of cycleTitleLines) {
        addTextSafely(pdf, line, margin + 2, yPosition + 8);
        yPosition += 8;
      }
      yPosition += 10;

      // –ö—Ä–∞—Ç–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º
      for (const thought of cycle.thoughts.slice(0, 3)) {
        pdf.setTextColor(0, 0, 0);
        pdf.setFontSize(9);
        pdf.setFont('helvetica', 'bold');
        addTextSafely(pdf, `${getAgentName(thought.agentRole)}:`, margin + 5, yPosition);
        yPosition += 6;
        
        pdf.setFont('helvetica', 'normal');
        const shortEssence = thought.essence.substring(0, 200) + (thought.essence.length > 200 ? '...' : '');
        const lines = splitTextForPDF(pdf, shortEssence, contentWidth - 10);
        
        for (let i = 0; i < Math.min(lines.length, 2); i++) {
          addTextSafely(pdf, lines[i], margin + 5, yPosition);
          yPosition += 5;
        }
        yPosition += 5;
      }
      
      if (cycle.thoughts.length > 3) {
        pdf.setTextColor(128, 128, 128);
        pdf.setFontSize(8);
        addTextSafely(pdf, `... –∏ –µ—â–µ ${cycle.thoughts.length - 3} —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π`, margin + 5, yPosition);
        yPosition += 8;
      }
      
      yPosition += 10;
    }

    return pdf;
  };

  const handleExport = async () => {
    try {
      let pdf: jsPDF;
      let filename: string;

      if (variant === 'single' && cycle) {
        pdf = generateSingleCyclePDF(cycle);
        filename = `neuroagent-—Ü–∏–∫–ª-${cycle.number}.pdf`;
      } else if (variant === 'all' && cycles) {
        pdf = generateAllCyclesPDF(cycles);
        filename = `neuroagent-–ø–æ–ª–Ω–∞—è-–∏—Å—Ç–æ—Ä–∏—è.pdf`;
      } else {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF');
        return;
      }

      pdf.save(filename);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
  };

  return (
    <motion.button
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      onClick={handleExport}
      className="modern-btn modern-btn-secondary"
      title={variant === 'single' ? '–≠–∫—Å–ø–æ—Ä—Ç —Ü–∏–∫–ª–∞ –≤ PDF' : '–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≤ PDF'}
    >
      <FileText className="w-4 h-4" />
      {buttonText || 'PDF'}
    </motion.button>
  );
};

export default PdfExportAdvanced; 