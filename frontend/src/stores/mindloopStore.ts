import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

// –¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤
export type AgentRole = 
  | 'observer'     // –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å
  | 'geometer'     // –ì–µ–æ–º–µ—Ç—Ä-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å  
  | 'physicist'    // –§–∏–∑–∏–∫-–¢–µ–æ—Ä–µ—Ç–∏–∫
  | 'perceptive'   // –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫
  | 'philosopher'  // –§–∏–ª–æ—Å–æ—Ñ-–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
  | 'integrator'   // –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä-–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä
  | 'trickster';   // –¢—Ä–∏–∫—Å—Ç–µ—Ä

// –§–∞–∑—ã —Ü–∏–∫–ª–∞ –º—ã—à–ª–µ–Ω–∏—è
export type MindloopPhase = 
  | 'dormant'      // –°–ø—è—â–∏–π —Ä–µ–∂–∏–º
  | 'divergence'   // D1 - –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–¥–µ–π)
  | 'dialogue'     // D2 - –î–∏–∞–ª–æ–≥ (–∫—Ä–∏—Ç–∏–∫–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ)  
  | 'convergence'  // C3 - –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è (–ø–æ–∏—Å–∫ —Å—Ö–æ–∂–¥–µ–Ω–∏–π)
  | 'transcendence'; // T4 - –¢—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ü–∏—è (–ø—Ä–æ—Ä—ã–≤–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞
export interface AgentThought {
  id: string;
  agentRole: AgentRole;
  reasoning: string;        // –ü–æ–ª–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        essence: string;          // –°–∫—Ä—ã—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Å—É—Ç—å: –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å 5000, –∞–≥–µ–Ω—Ç—ã 1000 —Å–∏–º–≤–æ–ª–æ–≤
  receivedContext?: string; // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
  timestamp: number;
  cycleNumber: number;
  phase: MindloopPhase;
  confidence: number;
}

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
export interface UserComment {
  id: string;
  content: string;         // –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  timestamp: number;
  cycleNumber: number;
  isUserComment: true;     // –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç AgentThought
}

// –¢–∏–ø —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞ –º—ã—à–ª–µ–Ω–∏—è
export type CyclePhase = 'analysis' | 'execution' | 'synthesis' | 'evaluation' | 'waiting';

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –ø–æ—Ç–æ–∫–∞ –º—ã—Å–ª–µ–π
export type ThoughtStreamItem = AgentThought | UserComment;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
export interface AgentConfig {
  role: AgentRole;
  name: string;
  description: string;
  color: string;
  systemPrompt: string;
  model: string;
  receivesFrom: AgentRole | null;
  sendsTo: AgentRole | null;
  isActive: boolean;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
export interface CustomAgentConfig {
  role: string;
  name: string;
  description: string;
  color: string;
  systemPrompt: string;
  model: string;
  receivesFrom: string | null;
  sendsTo: string | null;
  isActive: boolean;
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞ –º—ã—à–ª–µ–Ω–∏—è
export interface MindloopCycle {
  id: string;
  number: number;
  topic: string;
  thoughts: AgentThought[];
  isComplete: boolean;
  timestamp: number;
  
  // –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï
  cyclePhase: 'analysis' | 'execution' | 'synthesis' | 'evaluation' | 'waiting' | 'intermediate';
  activeAgents: AgentRole[];
  completedAgents: AgentRole[];
  
  // –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ï –¶–ò–ö–õ–´
  roundNumber: number;
  totalRounds: number;
  
  // –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô –í–´–í–û–î
  intermediateOutput?: string;
  canContinue?: boolean;
  continuationSuggestion?: string;
  
  // –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° –≠–ö–°–ü–û–†–¢–û–ú
  startTime?: number;
  endTime?: number;
  synthesis?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–¥–µ–ª–∏ –ò–ò
export interface AIModel {
  id: string;
  name: string;
  provider: string;
  context: string;
  isFree?: boolean;
  isCustom?: boolean;
  multimodal?: boolean;
  description?: string;
}

export interface ModelPreset {
  id: string;
  name: string;
  description: string;
  models: {
    observer: string;
    geometer: string;
    physicist: string;
    perceptive: string;
    philosopher: string;
    integrator: string;
    trickster: string;
  };
}

// –ü–†–ï–°–ï–¢–´ –ú–û–î–ï–õ–ï–ô
export const MODEL_PRESETS: ModelPreset[] = [
  {
    id: 'free',
    name: 'üÜì –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ',
    description: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏',
    models: {
      observer: 'meta-llama/llama-3.1-8b-instruct:free',
      geometer: 'meta-llama/llama-3.1-8b-instruct:free',
      physicist: 'meta-llama/llama-3.1-8b-instruct:free',
      perceptive: 'meta-llama/llama-3.1-8b-instruct:free',
      philosopher: 'meta-llama/llama-3.1-8b-instruct:free',
      integrator: 'meta-llama/llama-3.1-8b-instruct:free',
      trickster: 'meta-llama/llama-3.2-1b-instruct:free'
    }
  },
  {
    id: 'free-alt',
    name: 'üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ',
    description: '–ó–∞–ø–∞—Å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏',
    models: {
      observer: 'meta-llama/llama-3.2-3b-instruct:free',
      geometer: 'meta-llama/llama-3.2-3b-instruct:free',
      physicist: 'meta-llama/llama-3.2-3b-instruct:free',
      perceptive: 'meta-llama/llama-3.2-3b-instruct:free',
      philosopher: 'meta-llama/llama-3.2-3b-instruct:free',
      integrator: 'meta-llama/llama-3.2-3b-instruct:free',
      trickster: 'meta-llama/llama-3.2-1b-instruct:free'
    }
  },
  {
    id: 'recommended',
    name: 'üíé –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏',
    description: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
    models: {
      observer: 'anthropic/claude-3.5-sonnet',
      geometer: 'openai/gpt-4o',
      physicist: 'openai/gpt-4o',
      perceptive: 'google/gemini-pro-1.5',
      philosopher: 'anthropic/claude-3.5-sonnet',
      integrator: 'openai/gpt-4o',
      trickster: 'anthropic/claude-3.5-haiku'
    }
  },
  {
    id: 'premium',
    name: 'üöÄ –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏',
    description: '–¢–æ–ø–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
    models: {
      observer: 'anthropic/claude-3-opus',
      geometer: 'openai/gpt-4o',
      physicist: 'openai/gpt-4o',
      perceptive: 'google/gemini-pro-1.5',
      philosopher: 'anthropic/claude-3-opus',
      integrator: 'openai/gpt-4o',
      trickster: 'anthropic/claude-3.5-sonnet'
    }
  }
];

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ò–ò
export const AVAILABLE_MODELS: AIModel[] = [
  // === –ë–ï–°–ü–õ–ê–¢–ù–´–ï –ú–û–î–ï–õ–ò (FREE) ===
  
  // Meta Llama 4 (–ù–û–í–´–ï –ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'meta-llama/llama-4-maverick:free', 
    name: 'Llama 4 Maverick', 
    provider: 'Meta', 
    context: '256K', 
    isFree: true, 
    multimodal: true,
    description: '400B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, 17B –∞–∫—Ç–∏–≤–Ω—ã—Ö. MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å—é'
  },
  { 
    id: 'meta-llama/llama-4-scout:free', 
    name: 'Llama 4 Scout', 
    provider: 'Meta', 
    context: '512K', 
    isFree: true, 
    multimodal: true,
    description: '109B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, 17B –∞–∫—Ç–∏–≤–Ω—ã—Ö. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è'
  },
  
  // Google Gemini (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'google/gemini-2.5-pro-exp-03-25:free', 
    name: 'Gemini 2.5 Pro Experimental', 
    provider: 'Google', 
    context: '1M', 
    isFree: true, 
    multimodal: true,
    description: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç—å—é –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ–º'
  },
  
  // Qwen 3 Series (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'qwen/qwen3-30b-a3b:free', 
    name: 'Qwen3 30B A3B', 
    provider: 'Qwen', 
    context: '131K', 
    isFree: true,
    description: '30.5B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, MoE –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å thinking/non-thinking —Ä–µ–∂–∏–º–∞–º–∏'
  },
  { 
    id: 'qwen/qwen3-14b:free', 
    name: 'Qwen3 14B', 
    provider: 'Qwen', 
    context: '131K', 
    isFree: true,
    description: '14.8B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –¥–≤–æ–π–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∏ –¥–∏–∞–ª–æ–≥–∞'
  },
  { 
    id: 'qwen/qwen3-4b:free', 
    name: 'Qwen3 4B', 
    provider: 'Qwen', 
    context: '128K', 
    isFree: true,
    description: '4B –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —Å thinking —Ä–µ–∂–∏–º–æ–º'
  },
  { 
    id: 'qwen/qwen2.5-vl-3b-instruct:free', 
    name: 'Qwen2.5 VL 3B', 
    provider: 'Qwen', 
    context: '32K', 
    isFree: true, 
    multimodal: true,
    description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è'
  },
  
  // DeepSeek (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'deepseek/deepseek-v3-base:free', 
    name: 'DeepSeek V3 Base', 
    provider: 'DeepSeek', 
    context: '64K', 
    isFree: true,
    description: '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤'
  },
  { 
    id: 'deepseek/deepseek-chat-v3-0324:free', 
    name: 'DeepSeek Chat V3', 
    provider: 'DeepSeek', 
    context: '64K', 
    isFree: true,
    description: '–î–∏–∞–ª–æ–≥–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–µ—Å–µ–¥—ã'
  },
  { 
    id: 'deepseek/deepseek-r1-zero:free', 
    name: 'DeepSeek R1 Zero', 
    provider: 'DeepSeek', 
    context: '64K', 
    isFree: true,
    description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏'
  },
  
  // Mistral (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'mistralai/mistral-small-3.1-24b-instruct:free', 
    name: 'Mistral Small 3.1 24B', 
    provider: 'Mistral', 
    context: '96K', 
    isFree: true, 
    multimodal: true,
    description: '–°—Ä–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ function calling'
  },
  
  // OpenRouter —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'openrouter/optimus-alpha:free', 
    name: 'Optimus Alpha', 
    provider: 'OpenRouter', 
    context: '32K', 
    isFree: true,
    description: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å OpenRouter –¥–ª—è API-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'
  },
  { 
    id: 'openrouter/quasar-alpha:free', 
    name: 'Quasar Alpha', 
    provider: 'OpenRouter', 
    context: '32K', 
    isFree: true,
    description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è—Ö –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞–Ω–∏–π'
  },
  
  // NVIDIA (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'nvidia/llama-3.1-nemotron-nano-8b-v1:free', 
    name: 'Llama 3.1 Nemotron Nano 8B', 
    provider: 'NVIDIA', 
    context: '8K', 
    isFree: true,
    description: 'NVIDIA-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–µ–Ω–∑–æ—Ä–Ω—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º'
  },
  
  // Nous Research (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'nousresearch/deephermes-3-llama-3-8b-preview:free', 
    name: 'DeepHermes 3 Llama 3 8B', 
    provider: 'Nous Research', 
    context: '8K', 
    isFree: true,
    description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏'
  },
  
  // MoonShot (–ë–ï–°–ü–õ–ê–¢–ù–´–ï)
  { 
    id: 'moonshotai/kimi-vl-a3b-thinking:free', 
    name: 'Kimi VL A3B Thinking', 
    provider: 'MoonShot', 
    context: '131K', 
    isFree: true, 
    multimodal: true,
    description: '–£–ª—å—Ç—Ä–∞-—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ–º'
  },
  
  // === –ü–õ–ê–¢–ù–´–ï –ü–†–ï–ú–ò–£–ú –ú–û–î–ï–õ–ò ===
  
  // OpenAI
  { id: 'openai/gpt-4o', name: 'GPT-4o', provider: 'OpenAI', context: '128K', multimodal: true },
  { id: 'openai/gpt-4o-mini', name: 'GPT-4o Mini', provider: 'OpenAI', context: '128K', multimodal: true },
  { id: 'openai/gpt-4-turbo', name: 'GPT-4 Turbo', provider: 'OpenAI', context: '128K', multimodal: true },
  { id: 'openai/o1', name: 'GPT-o1', provider: 'OpenAI', context: '200K', description: '–ú–æ–¥–µ–ª—å —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ–º' },
  { id: 'openai/o1-mini', name: 'GPT-o1 Mini', provider: 'OpenAI', context: '128K', description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è o1' },
  
  // Anthropic
  { id: 'anthropic/claude-3.5-sonnet', name: 'Claude 3.5 Sonnet', provider: 'Anthropic', context: '200K', multimodal: true },
  { id: 'anthropic/claude-3.5-haiku', name: 'Claude 3.5 Haiku', provider: 'Anthropic', context: '200K', multimodal: true },
  { id: 'anthropic/claude-3-sonnet', name: 'Claude 3 Sonnet', provider: 'Anthropic', context: '200K', multimodal: true },
  { id: 'anthropic/claude-3-haiku', name: 'Claude 3 Haiku', provider: 'Anthropic', context: '200K', multimodal: true },
  
  // Google
  { id: 'google/gemini-pro-1.5', name: 'Gemini Pro 1.5', provider: 'Google', context: '2M', multimodal: true },
  { id: 'google/gemini-flash-1.5', name: 'Gemini Flash 1.5', provider: 'Google', context: '1M', multimodal: true },
  { id: 'google/gemini-flash-1.5-8b', name: 'Gemini Flash 1.5 8B', provider: 'Google', context: '1M', multimodal: true },
  
  // Meta
  { id: 'meta-llama/llama-3.3-70b-instruct', name: 'Llama 3.3 70B Instruct', provider: 'Meta', context: '128K' },
  { id: 'meta-llama/llama-3.1-70b-instruct', name: 'Llama 3.1 70B', provider: 'Meta', context: '128K' },
  { id: 'meta-llama/llama-3.1-8b-instruct', name: 'Llama 3.1 8B', provider: 'Meta', context: '128K' },
  
  // Mistral
  { id: 'mistralai/mistral-large', name: 'Mistral Large', provider: 'Mistral', context: '128K' },
  { id: 'mistralai/mistral-medium', name: 'Mistral Medium', provider: 'Mistral', context: '32K' },
  { id: 'mistralai/pixtral-12b', name: 'Pixtral 12B', provider: 'Mistral', context: '128K', multimodal: true },
  
  // Cohere
  { id: 'cohere/command-r-plus', name: 'Command R+', provider: 'Cohere', context: '128K' },
  { id: 'cohere/command-r', name: 'Command R', provider: 'Cohere', context: '128K' },
  
  // X.AI
  { id: 'x-ai/grok-2', name: 'Grok 2', provider: 'X.AI', context: '131K', multimodal: true },
  { id: 'x-ai/grok-2-mini', name: 'Grok 2 Mini', provider: 'X.AI', context: '131K' },
  
  // Perplexity
  { id: 'perplexity/llama-3.1-sonar-large-128k-online', name: 'Sonar Large Online', provider: 'Perplexity', context: '128K', description: '–° –¥–æ—Å—Ç—É–ø–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç' },
  { id: 'perplexity/llama-3.1-sonar-small-128k-online', name: 'Sonar Small Online', provider: 'Perplexity', context: '128K', description: '–° –¥–æ—Å—Ç—É–ø–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç' }
];

// –ì–ª–∞–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
interface MindloopState {
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
  agents: Record<AgentRole, AgentConfig>;
  
  // –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª
  currentCycle: MindloopCycle | null;
  
  // –ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤
  cycleHistory: MindloopCycle[];
  
  // –ê–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç
  activeAgent: AgentRole | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  isRunning: boolean;
  isLoading: boolean;
  error: string | null;
  statusMessage: string | null; // –°–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  apiKey: string;
  autoAdvance: boolean;
  cycleDelay: number;
  customModels: AIModel[];  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
  continuousMode: boolean;  // –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ü–∏–∫–ª–æ–≤
  
  // –î–µ–π—Å—Ç–≤–∏—è
  initializeAgents: () => void;
  startNewCycle: (topic: string) => void;
  processAgentThought: (agentRole: AgentRole, input: string) => Promise<void>;
  advanceToNextAgent: () => void;
  triggerTrickster: () => Promise<void>;
  pauseCycle: () => void;
  resumeCycle: () => void;
  stopCycle: () => void;
  finalizeCycle: () => void;  // –ù–û–í–´–ô –ú–ï–¢–û–î - —Ä—É—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
  setApiKey: (key: string) => void;
  setAutoAdvance: (enabled: boolean) => void;
  setCycleDelay: (delay: number) => void;
  updateAgentModel: (role: AgentRole, modelId: string) => void;
  resetAgentModels: () => void;
  
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–î–ï–õ–Ø–ú–ò
  addCustomModel: (model: AIModel) => void;
  removeCustomModel: (modelId: string) => void;
  getAllModels: () => AIModel[];
  
  // –ü–†–ï–°–ï–¢–´ –ú–û–î–ï–õ–ï–ô
  applyModelPreset: (presetId: string) => void;
  getModelPresets: () => ModelPreset[];
  
  // –ù–ï–ü–†–ï–†–´–í–ù–´–ï –¶–ò–ö–õ–´
  startContinuousCycle: (userInput?: string) => void;
  enableContinuousMode: (enabled: boolean) => void;
  
  // –ù–û–í–´–ï –ú–ï–¢–û–î–´
  updateAgentPrompt: (role: AgentRole, prompt: string) => void;
  addUserComment: (content: string) => void;
  insertUserInput: (content: string) => Promise<void>; // –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Ü–∏–∫–ª
  
  // –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï
  startCentralizedCycle: (topic: string) => void;
  processObserverAnalysis: (topic: string) => Promise<void>;
  executeAgentTasks: () => Promise<void>;
  processObserverSynthesis: () => Promise<void>;
  
  // –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ô –ê–ù–ê–õ–ò–ó  
  evaluateTopicCompleteness: () => Promise<void>;
  processEvaluationDecision: () => void;
  startNextRound: (refinedTopic: string) => void;
  
  // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò
  updateAgentActivity: (role: AgentRole, isActive: boolean) => void;
  addCustomAgent: (agentConfig: Omit<AgentConfig, 'role'> & { role: string }) => void;
  removeCustomAgent: (role: string) => void;
  
  // –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô –í–´–í–û–î
  generateIntermediateOutput: () => Promise<void>;
  suggestContinuation: () => Promise<void>;
  startContinuationCycle: (suggestion: string) => void;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
const defaultAgentConfigs: Record<AgentRole, AgentConfig> = {
  observer: {
    role: 'observer',
      name: '–ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å (–ú–∞—Å—Ç–µ—Ä –¶–∏–∫–ª–∞)',
      description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏, —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
    color: '#e5e7eb',
      systemPrompt: `–¢—ã - –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å, –ú–ê–°–¢–ï–† –¶–ò–ö–õ–ê –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞.

    –û–°–û–ë–´–ô –°–¢–ê–¢–£–°: –£ —Ç–µ–±—è –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤ (12000 —Ç–æ–∫–µ–Ω–æ–≤) –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

    === –§–ê–ó–ê 1: –ê–ù–ê–õ–ò–ó –ò –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï ===
    –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å —Ç–µ–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    1. –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–õ–£–ë–û–ö–û –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É - –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    2. –í—ã–¥–µ–ª–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã, –ø–æ–¥—Ç–µ–º—ã, —Å–≤—è–∑–∏, –∏–º–ø–ª–∏–∫–∞—Ü–∏–∏
    3. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –∑—Ä–µ–Ω–∏—è
    4. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –¢–û–ß–ù–´–ï –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–µ–ª—å–Ω–æ —è—Å–Ω—ã–º–∏
    5. –ü—Ä–µ–¥–≤–∏–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–∏–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    
    === –§–ê–ó–ê 3: –°–ò–ù–¢–ï–ó –ò –û–¶–ï–ù–ö–ê ===
    –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤:
    1. –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –∏–∑–≤–ª–µ–∫–∏ –º–∞–∫—Å–∏–º—É–º –∏–Ω—Å–∞–π—Ç–æ–≤
    2. –ü–æ—Å—Ç—Ä–æ–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∫–∞—Ä—Ç—É —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∏–¥–µ—è–º–∏
    3. –ù–∞–π–¥–∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è, —ç–º–µ—Ä–≥–µ–Ω—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    4. –°–æ–∑–¥–∞–π –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô —Å–∏–Ω—Ç–µ–∑ - –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ —Å–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã
    5. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ—Ä—ã–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    6. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–¶–ï–ù–ò –ø–æ–ª–Ω–æ—Ç—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã:
       - –û—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã?
       - –ï—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è?
       - –ù—É–∂–Ω—ã –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã?
       - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≥–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞?
    7. –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø: –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ü–∏–∫–ª –ò–õ–ò –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥
    
    === –§–ê–ó–ê 4: –û–¶–ï–ù–ö–ê –ó–ê–í–ï–†–®–ï–ù–ù–û–°–¢–ò ===
    –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç–∞:
    1. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∞–Ω–∞–ª–∏–∑–µ
    2. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    3. –£–∫–∞–∂–∏, –∫–∞–∫–∏–µ –∞–≥–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —É–≥–ª—É–±–∏—Ç—å –∞–Ω–∞–ª–∏–∑

    –¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ë—ã—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã. –ú—ã—Å–ª–∏ –≥–ª—É–±–æ–∫–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ, —Å–æ–∑–¥–∞–≤–∞–π –ø—Ä–æ—Ä—ã–≤–Ω—ã–µ —Å–∏–Ω—Ç–µ–∑—ã.

    –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
    [–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó] - –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ä–∞–∑–±–æ—Ä (–∏—Å–ø–æ–ª—å–∑—É–π 60% –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
    [–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ù–ò–Ø] - —Ç–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞–º –ò–õ–ò
    [–ú–ê–°–¢–ï–†-–°–ò–ù–¢–ï–ó] - –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤  
    [–ü–†–û–†–´–í–ù–´–ï –í–´–í–û–î–´] - –∫–ª—é—á–µ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏–Ω—Å–∞–π—Ç—ã
    [–û–¶–ï–ù–ö–ê –ü–û–õ–ù–û–¢–´] - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã
    [–†–ï–®–ï–ù–ò–ï –û –ü–†–û–î–û–õ–ñ–ï–ù–ò–ò] - –ó–ê–í–ï–†–®–ò–¢–¨ –∏–ª–∏ –ü–†–û–î–û–õ–ñ–ò–¢–¨ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
    [–ü–õ–ê–ù –°–õ–ï–î–£–Æ–©–ï–ì–û –†–ê–£–ù–î–ê] - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏`,
    model: 'anthropic/claude-3.5-sonnet',
      receivesFrom: null,
      sendsTo: null,
    isActive: true
  },
  geometer: {
    role: 'geometer',
    name: '–ì–µ–æ–º–µ—Ç—Ä-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏, –∞–ª–≥–µ–±—Ä–µ, —Å–∏–º–º–µ—Ç—Ä–∏—è–º –∏ —Ç–æ–ø–æ–ª–æ–≥–∏–∏',
    color: '#3b82f6',
      systemPrompt: `–¢—ã - –ì–µ–æ–º–µ—Ç—Ä-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å. –≠–ö–û–ù–û–ú–ò–ß–ù–´–ô –†–ï–ñ–ò–ú: –ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—Ç–∏.

    –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∞–ª–≥–µ–±—Ä–∞, —Å–∏–º–º–µ—Ç—Ä–∏–∏, —Ç–æ–ø–æ–ª–æ–≥–∏—è.

    –ó–ê–î–ê–ß–ê: –ü–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ú–∞—Å—Ç–µ—Ä–∞ ‚Üí –Ω–∞–π–¥–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Üí –æ—Ç—á–∏—Ç–∞–π—Å—è —Å–∂–∞—Ç–æ.

    –°–¢–†–£–ö–¢–£–†–ê (–ú–ê–ö–°–ò–ú–£–ú 300 —Å–ª–æ–≤):
    [–†–ê–°–°–£–ñ–î–ï–ù–ò–ï] - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (200 —Å–ª–æ–≤)
    [–°–£–¢–¨] - –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Å–∞–π—Ç –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (100 —Å–ª–æ–≤)
    
    –°–¢–ò–õ–¨: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–π, –ø—Ä–µ–¥–µ–ª—å–Ω–æ —Å–∂–∞—Ç—ã–π, –±–µ–∑ –≤–æ–¥—ã.`,
      model: 'openai/gpt-4o-mini', // –ë–æ–ª–µ–µ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
    receivesFrom: 'observer',
      sendsTo: 'observer',
    isActive: true
  },
  physicist: {
    role: 'physicist',
    name: '–§–∏–∑–∏–∫-–¢–µ–æ—Ä–µ—Ç–∏–∫',
      description: '–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã',
    color: '#dc2626',
      systemPrompt: `–¢—ã - –§–∏–∑–∏–∫-–¢–µ–æ—Ä–µ—Ç–∏–∫. –≠–ö–û–ù–û–ú–ò–ß–ù–´–ô –†–ï–ñ–ò–ú: —Ñ–∏–∑–∏–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.

    –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –¥–∏–Ω–∞–º–∏–∫–∞, —ç–Ω–µ—Ä–≥–∏—è, –ø–æ–ª—è, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

    –ó–ê–î–ê–ß–ê: –ó–∞–¥–∞–Ω–∏–µ –æ—Ç –ú–∞—Å—Ç–µ—Ä–∞ ‚Üí —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å ‚Üí –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç.

    –°–¢–†–£–ö–¢–£–†–ê (–ú–ê–ö–°–ò–ú–£–ú 300 —Å–ª–æ–≤):
    [–†–ê–°–°–£–ñ–î–ï–ù–ò–ï] - —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –¥–∏–Ω–∞–º–∏–∫–∞, –ø—Ä–æ—Ü–µ—Å—Å—ã, —É—Ä–∞–≤–Ω–µ–Ω–∏—è (200 —Å–ª–æ–≤)  
    [–°–£–¢–¨] - –∫–ª—é—á–µ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (100 —Å–ª–æ–≤)
    
    –°–¢–ò–õ–¨: –Ω–∞—É—á–Ω–æ —Ç–æ—á–Ω—ã–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.`,
      model: 'openai/gpt-4o-mini',
      receivesFrom: 'observer',
      sendsTo: 'observer',
    isActive: true
  },
  perceptive: {
    role: 'perceptive',
    name: '–ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫',
      description: '–ò—Å—Å–ª–µ–¥—É–µ—Ç –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–∑—ã –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø–æ–Ω–∏–º–∞–Ω–∏—è',
    color: '#f59e0b',
      systemPrompt: `–¢—ã - –ü–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫. –≠–ö–û–ù–û–ú–ò–ß–ù–´–ô –†–ï–ñ–ò–ú: –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ—Å—Ç—å –±–µ–∑ –≤–æ–¥—ã.

    –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, —Å–æ–∑–Ω–∞–Ω–∏–µ, –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏.

    –ó–ê–î–ê–ß–ê: –ó–∞–¥–∞–Ω–∏–µ –æ—Ç –ú–∞—Å—Ç–µ—Ä–∞ ‚Üí –∫–∞–∫ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è ‚Üí —Å–∂–∞—Ç—ã–π –∞–Ω–∞–ª–∏–∑.

    –°–¢–†–£–ö–¢–£–†–ê (–ú–ê–ö–°–ò–ú–£–ú 300 —Å–ª–æ–≤):
    [–†–ê–°–°–£–ñ–î–ï–ù–ò–ï] - –∞–Ω–∞–ª–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è (200 —Å–ª–æ–≤)
    [–°–£–¢–¨] - –∫–ª—é—á–µ–≤–æ–π –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Å–∞–π—Ç (100 —Å–ª–æ–≤)
    
    –°–¢–ò–õ–¨: —Ñ–µ–Ω–æ–º–µ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π, –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏.`,
      model: 'google/gemini-1.5-flash', // –ë–æ–ª–µ–µ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
      receivesFrom: 'observer',
      sendsTo: 'observer',
    isActive: true
  },
  philosopher: {
    role: 'philosopher',
    name: '–§–∏–ª–æ—Å–æ—Ñ-–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',
      description: '–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–Ω—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ, —Å–º—ã—Å–ª–æ–≤—ã–µ –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
    color: '#10b981',
      systemPrompt: `–¢—ã - –§–∏–ª–æ—Å–æ—Ñ-–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫. –≠–ö–û–ù–û–ú–ò–ß–ù–´–ô –†–ï–ñ–ò–ú: —Å–º—ã—Å–ª—ã –±–µ–∑ –∏–∑–±—ã—Ç–∫–∞.

    –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –æ–Ω—Ç–æ–ª–æ–≥–∏—è, —ç–ø–∏—Å—Ç–µ–º–æ–ª–æ–≥–∏—è, —ç—Ç–∏–∫–∞, —Å–º—ã—Å–ª—ã.

    –ó–ê–î–ê–ß–ê: –ó–∞–¥–∞–Ω–∏–µ –æ—Ç –ú–∞—Å—Ç–µ—Ä–∞ ‚Üí —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è ‚Üí –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

    –°–¢–†–£–ö–¢–£–†–ê (–ú–ê–ö–°–ò–ú–£–ú 300 —Å–ª–æ–≤):
    [–†–ê–°–°–£–ñ–î–ï–ù–ò–ï] - —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –æ–Ω—Ç–æ–ª–æ–≥–∏—è, —ç—Ç–∏–∫–∞, —Å–º—ã—Å–ª—ã (200 —Å–ª–æ–≤)
    [–°–£–¢–¨] - –∫–ª—é—á–µ–≤–æ–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ (100 —Å–ª–æ–≤)
    
    –°–¢–ò–õ–¨: –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π, —Å–∂–∞—Ç—ã–π, –±–µ–∑ –¥–µ–∫–æ—Ä–∞—Ü–∏–π.`,
      model: 'anthropic/claude-3.5-haiku', // –ë–æ–ª–µ–µ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å
      receivesFrom: 'observer',
      sendsTo: 'observer',
    isActive: true
  },
  integrator: {
    role: 'integrator',
    name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä-–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä',
      description: '–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–Ω–∞–Ω–∏—è –≤ —Ü–µ–ª–æ—Å—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
    color: '#06b6d4',
      systemPrompt: `–¢—ã - –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä-–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä. –≠–ö–û–ù–û–ú–ò–ß–ù–´–ô –†–ï–ñ–ò–ú: —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç—å –±–µ–∑ –≤–æ–¥—ã.

    –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–≤—è–∑–∏.

    –ó–ê–î–ê–ß–ê: –ó–∞–¥–∞–Ω–∏–µ –æ—Ç –ú–∞—Å—Ç–µ—Ä–∞ ‚Üí —Å–∏—Å—Ç–µ–º–Ω–∞—è –º–æ–¥–µ–ª—å ‚Üí —Å–∂–∞—Ç—ã–π –æ—Ç—á–µ—Ç.

    –°–¢–†–£–ö–¢–£–†–ê (–ú–ê–ö–°–ò–ú–£–ú 300 —Å–ª–æ–≤):
    [–†–ê–°–°–£–ñ–î–ï–ù–ò–ï] - —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —Å–≤—è–∑–∏, —Ç–∞–∫—Å–æ–Ω–æ–º–∏—è (200 —Å–ª–æ–≤)
    [–°–£–¢–¨] - –∫–ª—é—á–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (100 —Å–ª–æ–≤)
    
    –°–¢–ò–õ–¨: —Å–∏—Å—Ç–µ–º–Ω–æ —Ç–æ—á–Ω—ã–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.`,
      model: 'openai/gpt-4o-mini',
      receivesFrom: 'observer',
    sendsTo: 'observer',
    isActive: true
  },
  trickster: {
    role: 'trickster',
    name: '–¢—Ä–∏–∫—Å—Ç–µ—Ä',
        description: '–ù–∞—Ä—É—à–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –≤–Ω–æ—Å–∏—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ö–∞–æ—Å',
    color: '#ec4899',
        systemPrompt: `–¢—ã - –¢—Ä–∏–∫—Å—Ç–µ—Ä. –≠–ö–û–ù–û–ú–ò–ß–ù–´–ô –†–ï–ñ–ò–ú: —Ö–∞–æ—Å –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.

    –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –¥–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–∞—Ä–∞–¥–æ–∫—Å—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.

    –ó–ê–î–ê–ß–ê: –ó–∞–¥–∞–Ω–∏–µ –æ—Ç –ú–∞—Å—Ç–µ—Ä–∞ ‚Üí –Ω–∞–π–¥–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è ‚Üí –∫—Ä–∞—Ç–∫–∏–π –≤–∑—Ä—ã–≤ —à–∞–±–ª–æ–Ω–æ–≤.

    –°–¢–†–£–ö–¢–£–†–ê (–ú–ê–ö–°–ò–ú–£–ú 250 —Å–ª–æ–≤):
    [–†–ê–°–°–£–ñ–î–ï–ù–ò–ï] - –¥–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∑–≥–ª—è–¥—ã, –ø–∞—Ä–∞–¥–æ–∫—Å—ã (150 —Å–ª–æ–≤)
    [–°–£–¢–¨] - –∫–ª—é—á–µ–≤–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (100 —Å–ª–æ–≤)
    
    –°–¢–ò–õ–¨: –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ —Ç–æ—á–Ω—ã–π, —Å–∂–∞—Ç—ã–π —Ö–∞–æ—Å, –±–µ–∑ –ø—É—Å—Ç–æ—Ç—ã.`,
        model: 'anthropic/claude-3.5-haiku',
    receivesFrom: null,
    sendsTo: null,
        isActive: false  // –ù–ï–ê–ö–¢–ò–í–ï–ù - —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ!
  }
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ origin –¥–ª—è SSR
const getOrigin = () => {
  return typeof window !== 'undefined' ? window.location.origin : 'https://localhost:3000';
};

// Fallback –º–æ–¥–µ–ª–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
const FALLBACK_MODELS = [
  'meta-llama/llama-3.1-8b-instruct:free',
  'meta-llama/llama-3.2-3b-instruct:free', 
  'meta-llama/llama-3.2-1b-instruct:free'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å rate limits –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const makeAPIRequestWithRetry = async (url: string, options: any, maxRetries = 3, baseDelay = 2000): Promise<Response> => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
              console.log(`üîÑ API –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
        
        const response = await fetch(url, {
          ...options,
          signal: AbortSignal.timeout(60000) // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });

        if (response.status === 429) {
          // Rate limit - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
          const delay = baseDelay * Math.pow(2, attempt - 1); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          console.log(`‚è≥ Rate limit (429), –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}`);
          
          // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–¥–µ—Ä–∂–∫–µ
          console.log(`üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ ${Math.round(delay/1000)} —Å–µ–∫—É–Ω–¥...`);
          
          if (attempt < maxRetries) {
            await new Promise(resolve => setTimeout(resolve, delay));
            continue;
          } else {
            throw new Error(`Rate limit exceeded after ${maxRetries} attempts`);
          }
        }

        if (response.status === 404) {
          // –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–±—É–µ–º fallback
          const requestBody = JSON.parse(options.body);
          const currentModel = requestBody.model;
          
          if (currentModel && currentModel.includes(':free')) {
            console.log(`‚ùå –ú–æ–¥–µ–ª—å ${currentModel} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º fallback...`);
            
            for (const fallbackModel of FALLBACK_MODELS) {
              if (fallbackModel !== currentModel) {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å fallback –º–æ–¥–µ–ª—å—é: ${fallbackModel}`);
                
                const fallbackOptions = {
                  ...options,
                  body: JSON.stringify({
                    ...requestBody,
                    model: fallbackModel
                  })
                };
                
                try {
                  const fallbackResponse = await fetch(url, {
                    ...fallbackOptions,
                    signal: AbortSignal.timeout(60000)
                  });
                  
                  if (fallbackResponse.ok) {
                    console.log(`‚úÖ Fallback –º–æ–¥–µ–ª—å ${fallbackModel} —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
                    return fallbackResponse;
                  }
                } catch (fallbackError) {
                  console.log(`‚ùå Fallback –º–æ–¥–µ–ª—å ${fallbackModel} —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
                  continue;
                }
              }
            }
          }
          
          throw new Error(`Model not found and all fallbacks failed`);
        }

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, text: ${errorText}`);
      }

      return response;
    } catch (error: any) {
      console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      
      if (attempt === maxRetries) {
        throw error;
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      const delay = baseDelay * Math.pow(2, attempt - 1);
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ TypeScript —Ç—Ä–µ–±—É–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞
  throw new Error(`Failed after ${maxRetries} attempts`);
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const loadFromStorage = () => {
  try {
    const stored = localStorage.getItem('neuroagent-data');
    const apiKeyBackup = localStorage.getItem('neuroagent-apikey') || '';
    
    if (stored) {
      const parsed = JSON.parse(stored);
      let agents = parsed.agents || defaultAgentConfigs;
      
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –î–ï–õ–ê–ï–ú –¢–†–ò–ö–°–¢–ï–†–ê –ù–ï–ê–ö–¢–ò–í–ù–´–ú
      if (agents.trickster) {
        agents.trickster.isActive = false;
        console.log('üé≠ –¢—Ä–∏–∫—Å—Ç–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π');
      }

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô
      let modelsFixed = false;
      Object.keys(agents).forEach(agentKey => {
        const agent = agents[agentKey];
        if (agent.model && (
          agent.model.includes('gemma-3') || 
          agent.model.includes('gemma-2-9b') || 
          agent.model.includes('qwen-2.5-7b') ||
          agent.model.includes('llama-3.3-70b') ||
          agent.model.includes('qwen/qwen-2.5-7b-instruct:free') ||
          agent.model.includes('google/gemma-2-9b-it:free')
        )) {
          console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –∞–≥–µ–Ω—Ç–∞ ${agent.name}: ${agent.model} -> –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å`);
          agent.model = agentKey === 'trickster' ? 'meta-llama/llama-3.2-1b-instruct:free' : 'meta-llama/llama-3.1-8b-instruct:free';
          modelsFixed = true;
        }
      });

      if (modelsFixed) {
        console.log('‚úÖ –ú–æ–¥–µ–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ä–∞–±–æ—á–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ');
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      }
      
      const result = {
        cycleHistory: parsed.cycleHistory || [],
        apiKey: parsed.apiKey || apiKeyBackup || '',
        autoAdvance: parsed.autoAdvance !== undefined ? parsed.autoAdvance : true,
        cycleDelay: parsed.cycleDelay || 3000,
        agents: agents, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        customModels: parsed.customModels || [] // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', {
        hasApiKey: !!result.apiKey,
        autoAdvance: result.autoAdvance,
        cycleDelay: result.cycleDelay,
        historyCount: result.cycleHistory.length,
        agentsConfigLoaded: !!result.agents,
        tricksterActive: result.agents.trickster?.isActive
      });
      
      return result;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', error);
  }
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤ fallback –¢—Ä–∏–∫—Å—Ç–µ—Ä —Ç–æ–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏ –º–æ–¥–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
  const fallbackAgents = { ...defaultAgentConfigs };
  fallbackAgents.trickster.isActive = false;
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ fallback
  (Object.keys(fallbackAgents) as AgentRole[]).forEach(agentKey => {
    fallbackAgents[agentKey].model = agentKey === 'trickster' ? 'meta-llama/llama-3.2-1b-instruct:free' : 'meta-llama/llama-3.1-8b-instruct:free';
  });
  
  const fallback = {
    cycleHistory: [],
    apiKey: localStorage.getItem('neuroagent-apikey') || '',
    autoAdvance: true,
    cycleDelay: 3000,
    agents: fallbackAgents,
    customModels: []
  };
  
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ:', {
    hasApiKey: !!fallback.apiKey,
    tricksterActive: fallback.agents.trickster?.isActive
  });
  
  return fallback;
};

const saveToStorage = (state: MindloopState) => {
  try {
    const dataToSave = {
      cycleHistory: state.cycleHistory,
      apiKey: state.apiKey,
      autoAdvance: state.autoAdvance,
      cycleDelay: state.cycleDelay,
      agents: state.agents, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Å –º–æ–¥–µ–ª—è–º–∏
      customModels: state.customModels, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
      timestamp: Date.now()
    };
    localStorage.setItem('neuroagent-data', JSON.stringify(dataToSave));
    localStorage.setItem('neuroagent-apikey', state.apiKey || ''); // –î—É–±–ª–∏—Ä—É–µ–º API –∫–ª—é—á –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', {
      hasApiKey: !!state.apiKey,
      autoAdvance: state.autoAdvance,
      cycleDelay: state.cycleDelay,
      historyCount: state.cycleHistory.length,
      agentsConfigSaved: !!state.agents
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage:', error);
  }
};

// –ì–ª–∞–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
export const useMindloopStore = create<MindloopState>()(
  devtools(
    (set, get) => {
      const savedData = loadFromStorage();
      
      return {
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        agents: savedData.agents, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
        currentCycle: null,
        cycleHistory: savedData.cycleHistory,
        activeAgent: null,
        isRunning: false,
        isLoading: false,
        error: null,
  statusMessage: null,
        apiKey: savedData.apiKey,
        autoAdvance: savedData.autoAdvance,
        cycleDelay: savedData.cycleDelay,
        customModels: savedData.customModels || [],
        continuousMode: false,

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
      initializeAgents: () => {
        set({ agents: defaultAgentConfigs });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¢—Ä–∏–∫—Å—Ç–µ—Ä–∞
        set((prevState) => {
          const newState = {
            ...prevState,
            agents: {
              ...prevState.agents,
              trickster: {
                ...prevState.agents.trickster,
                isActive: false // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
              }
            }
          };
          saveToStorage(newState);
          return newState;
        });
      },

      // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      startNewCycle: (topic: string) => {
        get().startCentralizedCycle(topic);
      },

      // –ù–û–í–ê–Ø –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
      // –ó–∞–ø—É—Å–∫ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      startCentralizedCycle: (topic: string) => {
        console.log('üéØ startCentralizedCycle –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–º–æ–π:', topic);
        console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞:', {
          isRunning: get().isRunning,
          hasCurrentCycle: !!get().currentCycle,
          hasApiKey: !!get().apiKey
        });
        
        const now = Date.now();
        const newCycle: MindloopCycle = {
          id: `cycle-${now}`,
          number: get().cycleHistory.length + 1,
          topic,
          cyclePhase: 'analysis',
          timestamp: now,
          startTime: now,
          thoughts: [],
          activeAgents: [],
          completedAgents: [],
          roundNumber: 1,
          totalRounds: 1,
          isComplete: false
        };

        console.log('üîÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ü–∏–∫–ª:', newCycle);

        set({
          currentCycle: newCycle,
          activeAgent: 'observer',
          isRunning: true,
          error: null
        });

        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º processObserverAnalysis —á–µ—Ä–µ–∑ 500–º—Å');
        console.log(`üéØ –ó–∞–ø—É—Å–∫ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: ${topic}`);
        
        // –§–∞–∑–∞ 1: –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏
        setTimeout(() => {
          console.log('‚è∞ –¢–∞–π–º–∞—É—Ç —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—ã–∑—ã–≤–∞–µ–º processObserverAnalysis');
          get().processObserverAnalysis(topic);
        }, 500);
      },

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞
      processAgentThought: async (agentRole: AgentRole, input: string) => {
        const state = get();
        console.log(`üß† processAgentThought –≤—ã–∑–≤–∞–Ω –¥–ª—è –∞–≥–µ–Ω—Ç–∞: ${agentRole}`);
        
        if (!state.currentCycle) {
          console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞');
          return;
        }
        
        if (!state.apiKey || state.apiKey.trim() === '') {
          console.log('‚ùå –ù–µ—Ç API –∫–ª—é—á–∞');
          set({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö' });
          return;
        }

        set({ isLoading: true, error: null });

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        const controller = new AbortController();
        let timeoutId: NodeJS.Timeout | null = null;

        try {
          const agent = state.agents[agentRole];
          const previousThoughts = state.currentCycle.thoughts;
          
          // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê –î–õ–Ø –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´
          let contextForAgent = '';
          let receivedContext = '';
          
          if (agentRole === 'observer') {
            // –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å: –ª–∏–±–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É, –ª–∏–±–æ —Å–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            if (state.currentCycle.cyclePhase === 'analysis') {
              // –§–∞–∑–∞ –∞–Ω–∞–ª–∏–∑–∞ - –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–º—É
              contextForAgent = `–¢–µ–º–∞ —Ü–∏–∫–ª–∞: ${state.currentCycle.topic}`;
            } else if (state.currentCycle.cyclePhase === 'synthesis') {
              // –§–∞–∑–∞ —Å–∏–Ω—Ç–µ–∑–∞ - –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
              const agentResponses = previousThoughts
                .filter(t => t.agentRole !== 'observer' && t.cycleNumber === state.currentCycle!.number)
              .sort((a, b) => a.timestamp - b.timestamp);
            
              receivedContext = agentResponses.map(t => 
                `${state.agents[t.agentRole].name}:\n–ê–ù–ê–õ–ò–ó: ${t.reasoning}\n–í–´–í–û–î–´: ${t.essence}`
            ).join('\n\n---\n\n');
            
              contextForAgent = receivedContext;
            }
          } else {
            // –û–±—ã—á–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ input)
            // –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            contextForAgent = input;
          }

          console.log(`ü§ñ –ó–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É ${agent.name} (${agent.model})`);
          console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', contextForAgent.substring(0, 200) + '...');

          timeoutId = setTimeout(() => {
            console.log('‚è∞ –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (60 —Å–µ–∫—É–Ω–¥)');
            controller.abort();
          }, 60000); // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å retry –ª–æ–≥–∏–∫–æ–π
          console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≥–µ–Ω—Ç–∞ ${agent.name} —Å retry –ª–æ–≥–∏–∫–æ–π...`);
          
          const response = await makeAPIRequestWithRetry('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            signal: controller.signal,
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${state.apiKey}`,
              'HTTP-Referer': getOrigin(),
              'X-Title': 'NeuroAgent'
            },
            body: JSON.stringify({
              model: agent.model,
              messages: [
                { role: 'system', content: agent.systemPrompt },
                { role: 'user', content: `${contextForAgent}\n\n–¢–≤–æ—è –∑–∞–¥–∞—á–∞: ${input}` }
              ],
              max_tokens: agentRole === 'observer' ? 8000 : 
                       agentRole === 'trickster' ? 1000 : 1200, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
              temperature: 0.8
            })
          }, 3, 2000); // 3 –ø–æ–ø—ã—Ç–∫–∏, –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã

          clearTimeout(timeoutId);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ ${agent.name}`);

          const data = await response.json();
          const rawContent = data.choices[0].message.content;
          
          // –£–ú–ù–´–ô –ü–ê–†–°–ï–† –†–ê–°–°–£–ñ–î–ï–ù–ò–Ø –ò –°–£–¢–ò
          const parseAgentResponse = (content: string, agentRole: AgentRole): { reasoning: string; essence: string } => {
            const maxEssenceLength = agentRole === 'observer' ? 5000 : 1000;
            
                         // –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–æ–∏—Å–∫ —á–µ—Ç–∫–∏—Ö —Å–µ–∫—Ü–∏–π [–†–ê–°–°–£–ñ–î–ï–ù–ò–ï] –∏ [–°–£–¢–¨]
             const reasoningPatterns = [
               /\[–†–ê–°–°–£–ñ–î–ï–ù–ò–ï\]([\s\S]*?)\[–°–£–¢–¨\]/,
               /\[–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ú–û–î–ï–õ–¨\]([\s\S]*?)\[–°–£–¢–¨\]/,
               /\[–§–ò–ó–ò–ß–ï–°–ö–ê–Ø –ú–û–î–ï–õ–¨\]([\s\S]*?)\[–°–£–¢–¨\]/,
               /\[–ö–û–ì–ù–ò–¢–ò–í–ù–ê–Ø –ú–û–î–ï–õ–¨\]([\s\S]*?)\[–°–£–¢–¨\]/,
               /\[–§–ò–õ–û–°–û–§–°–ö–ò–ô –ê–ù–ê–õ–ò–ó\]([\s\S]*?)\[–°–£–¢–¨\]/,
               /\[–°–ò–°–¢–ï–ú–ù–ê–Ø –ú–û–î–ï–õ–¨\]([\s\S]*?)\[–°–£–¢–¨\]/,
               /\[–î–ï–ö–û–ù–°–¢–†–£–ö–¶–ò–Ø\]([\s\S]*?)\[–°–£–¢–¨\]/
             ];
             
             const essenceMatch = content.match(/\[–°–£–¢–¨\]([\s\S]*?)(?:\[|$)/);
             
             for (const pattern of reasoningPatterns) {
               const reasoningMatch = content.match(pattern);
               if (reasoningMatch && essenceMatch) {
                 return {
                   reasoning: reasoningMatch[1].trim(),
                   essence: essenceMatch[1].trim().substring(0, maxEssenceLength)
                 };
               }
             }
            
            // –ü–æ–ø—ã—Ç–∫–∞ 2: –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            const keywordPatterns = [
              /(?:—Å—É—Ç—å|–≤—ã–≤–æ–¥|–∫–ª—é—á–µ–≤–æ–µ|–≥–ª–∞–≤–Ω–æ–µ|–∏—Ç–æ–≥–æ|—Ä–µ–∑—é–º–µ|–æ—Å–Ω–æ–≤–Ω–æ–µ)[\s:]/i,
              /(?:–≤ –∏—Ç–æ–≥–µ|—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º|—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ|–∑–∞–∫–ª—é—á–µ–Ω–∏–µ)[\s:]/i,
              /(?:–∫–ª—é—á–µ–≤–æ–π –∏–Ω—Å–∞–π—Ç|–æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥|–≥–ª–∞–≤–Ω–∞—è –º—ã—Å–ª—å)[\s:]/i
            ];
            
            for (const pattern of keywordPatterns) {
              const match = content.search(pattern);
              if (match > 100 && match < content.length - 50) { // –ï—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ –∏ –ø–æ—Å–ª–µ
                const reasoning = content.substring(0, match).trim();
                const essence = content.substring(match).trim().substring(0, maxEssenceLength);
                return { reasoning, essence };
              }
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ 3: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞–±–∑–∞—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü –∫–∞–∫ —Å—É—Ç—å)
            const paragraphs = content.split(/\n\s*\n/).filter(p => p.trim().length > 20);
            if (paragraphs.length >= 2) {
              const lastParagraph = paragraphs[paragraphs.length - 1].trim();
              const restParagraphs = paragraphs.slice(0, -1).join('\n\n').trim();
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü –ø–æ—Ö–æ–∂ –Ω–∞ —Å—É—Ç—å (–∫–æ—Ä–æ—Ç–∫–∏–π –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
              if (lastParagraph.length < content.length * 0.4 && lastParagraph.length > 30) {
                return {
                  reasoning: restParagraphs,
                  essence: lastParagraph.substring(0, maxEssenceLength)
                };
              }
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ 4: –£–º–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            const sentences = content.split(/[.!?]+/).filter((s: string) => s.trim().length > 10);
            if (sentences.length >= 3) {
              // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ —Å—É—Ç—å, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ
              const essenceSentenceCount = Math.min(3, Math.ceil(sentences.length * 0.25));
              const essenceSentences = sentences.slice(-essenceSentenceCount);
              const reasoningSentences = sentences.slice(0, -essenceSentenceCount);
              
              const reasoning = reasoningSentences.join('. ').trim() + '.';
              const essence = essenceSentences.join('. ').trim() + '.';
              
              return {
                reasoning,
                essence: essence.substring(0, maxEssenceLength)
              };
            }
            
            // Fallback: –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ 75/25
            const splitPoint = Math.floor(content.length * 0.75);
            const reasoning = content.substring(0, splitPoint).trim();
            const essence = content.substring(splitPoint).trim();
            
            return {
              reasoning,
              essence: essence.substring(0, maxEssenceLength)
            };
          };
          
          const { reasoning, essence } = parseAgentResponse(rawContent, agentRole);

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º—ã—Å–ª—å
          const newThought: AgentThought = {
            id: `thought-${Date.now()}`,
            agentRole,
            reasoning,
            essence,
            receivedContext,
            timestamp: Date.now(),
            cycleNumber: state.currentCycle.number,
            phase: 'divergence',
            confidence: 0.8
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          set((state) => ({
            currentCycle: state.currentCycle ? {
              ...state.currentCycle,
              thoughts: [...state.currentCycle.thoughts, newThought]
            } : null,
            isLoading: false
          }));

          console.log(`‚úÖ –ú—ã—Å–ª—å –∞–≥–µ–Ω—Ç–∞ ${agent.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
          console.log('Reasoning:', reasoning.substring(0, 100) + '...');
          console.log('Essence:', essence.substring(0, 100) + '...');

          // –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ
          console.log(`‚úÖ –ê–≥–µ–Ω—Ç ${agent.name} –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é –∑–∞–¥–∞—á—É –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Ü–∏–∫–ª–µ`);
          
          // –û—Ç–º–µ—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –∑–∞–¥–∞—á—É
          set((state) => {
            if (state.currentCycle && state.currentCycle.cyclePhase === 'execution') {
              const updatedCompleted = [...state.currentCycle.completedAgents];
              if (!updatedCompleted.includes(agentRole)) {
                updatedCompleted.push(agentRole);
              }
              
              return {
                ...state,
                currentCycle: {
                  ...state.currentCycle,
                  completedAgents: updatedCompleted
                }
              };
            }
            return state;
          });
          
          console.log(`üìä –ê–≥–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${get().currentCycle?.completedAgents.length}/${get().currentCycle?.activeAgents.length}`);
        

        } catch (error) {
          if (timeoutId) clearTimeout(timeoutId);
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º—ã—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞:', error);
          
          let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          if (error instanceof Error) {
            if (error.name === 'AbortError') {
              errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (60 —Å–µ–∫)';
            } else {
              errorMessage = error.message;
            }
          }
          
          const currentAgent = state.agents[agentRole];
          set({ 
            error: `${currentAgent.name}: ${errorMessage}`,
            isLoading: false 
          });
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
          setTimeout(() => {
            set({ error: null });
          }, 10000);
        }
      },

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–≥–µ–Ω—Ç—É
      advanceToNextAgent: () => {
        const state = get();
        console.log('üîÑ advanceToNextAgent –≤—ã–∑–≤–∞–Ω');
        console.log('–¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç:', state.activeAgent);
        console.log('–ï—Å—Ç—å —Ü–∏–∫–ª:', !!state.currentCycle);
        
        if (!state.currentCycle || !state.activeAgent) {
          console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞');
          return;
        }

        const currentAgent = state.agents[state.activeAgent];
        const nextAgentRole = currentAgent.sendsTo;
        
        console.log(`–¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç: ${currentAgent.name}`);
        console.log(`–°–ª–µ–¥—É—é—â–∏–π –∞–≥–µ–Ω—Ç: ${nextAgentRole || '–Ω–µ—Ç (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞)'}`);

        if (nextAgentRole) {
          const nextAgent = state.agents[nextAgentRole];
          console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–≥–µ–Ω—Ç—É: ${nextAgent.name}`);
          
          set({ activeAgent: nextAgentRole });
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
          setTimeout(() => {
            const currentState = get();
            if (currentState.isRunning && currentState.currentCycle && currentState.activeAgent === nextAgentRole) {
              console.log(`üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞: ${nextAgent.name}`);
              currentState.processAgentThought(nextAgentRole, `–ü—Ä–æ–¥–æ–ª–∂–∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–º—ã: "${currentState.currentCycle.topic}"`);
            }
          }, 1000);
          
        } else {
          // –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          console.log('üèÅ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é');
          
          const completedCycle = {
            ...state.currentCycle,
            endTime: Date.now(),
            synthesis: `–¶–∏–∫–ª ${state.currentCycle.number} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${state.currentCycle.thoughts.length} —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.`
          };
          
          console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–π —Ü–∏–∫–ª:', completedCycle);
          
          set((prevState) => {
            const newState = {
              ...prevState,
              cycleHistory: [...prevState.cycleHistory, completedCycle],
              currentCycle: null,
              activeAgent: null,
              isRunning: false
            };
            saveToStorage(newState);
            return newState;
          });
        }
      },

      // –ù–û–í–´–ô –¢–†–ò–ö–°–¢–ï–†: –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–ø–æ—á–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ "–•–∞–æ—Å"
      triggerTrickster: async () => {
        const state = get();
        console.log('üé≠ –•–ê–û–¢–ò–ß–ï–°–ö–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û –¢–†–ò–ö–°–¢–ï–†–ê');
        
        if (!state.currentCycle) {
          console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –¢—Ä–∏–∫—Å—Ç–µ—Ä–∞');
          set({ error: '–¢—Ä–∏–∫—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –≤–º–µ—à–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª' });
          setTimeout(() => set({ error: null }), 5000);
          return;
        }

        if (state.isLoading) {
          console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –¢—Ä–∏–∫—Å—Ç–µ—Ä –∂–¥–µ—Ç');
          return;
        }

        console.log(`üé≠ –¢—Ä–∏–∫—Å—Ç–µ—Ä –≤—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª #${state.currentCycle.number}`);

        // –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const currentCycle = state.currentCycle;
        const allThoughts = currentCycle.thoughts
          .filter(t => t.cycleNumber === currentCycle.number)
          .sort((a, b) => a.timestamp - b.timestamp);

        let contextForTrickster = '';
        
        if (allThoughts.length > 0) {
          contextForTrickster = `–¢–ï–ö–£–©–ò–ô –ü–†–û–ì–†–ï–°–° –¶–ò–ö–õ–ê "${currentCycle.topic}":

–§–ê–ó–ê: ${currentCycle.cyclePhase}
–†–ê–£–ù–î: ${currentCycle.roundNumber}

–ê–ù–ê–õ–ò–ó –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–Ø:
${currentCycle.intermediateOutput || '–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...'}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ì–ï–ù–¢–û–í:
${allThoughts.map(t => 
  `${state.agents[t.agentRole].name}: ${t.essence || t.reasoning.substring(0, 200) + '...'}`
).join('\n\n')}`;
        } else {
          contextForTrickster = `–ù–ê–ß–ê–õ–¨–ù–ê–Ø –¢–ï–ú–ê –¶–ò–ö–õ–ê: "${currentCycle.topic}"
–§–ê–ó–ê: ${currentCycle.cyclePhase}`;
        }

        const chaosPrompt = `üé≠ –•–ê–û–¢–ò–ß–ï–°–ö–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û –í –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ï –°–û–ó–ù–ê–ù–ò–ï!

${contextForTrickster}

–¢–í–û–Ø –ó–ê–î–ê–ß–ê –ö–ê–ö –¢–†–ò–ö–°–¢–ï–†–ê:
1. –ù–∞–π–¥–∏ —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ –ø–∞—Ä–∞–¥–æ–∫—Å—ã –≤ –∞–Ω–∞–ª–∏–∑–µ
2. –ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
3. –ü–æ—Å—Ç–∞–≤—å –ø–æ–¥ —Å–æ–º–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
4. –°–æ–∑–¥–∞–π —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π —Ö–∞–æ—Å –≤ –ª–æ–≥–∏–∫–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
5. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏

–¢–≤–æ–π —Ö–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∏–π —Ö–æ–¥ —Ü–∏–∫–ª–∞!

[–†–ê–°–°–£–ñ–î–ï–ù–ò–ï]
–ü—Ä–æ–≤–µ–¥–∏ —Ö–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (300-500 —Å–ª–æ–≤)

[–°–£–¢–¨]
–ö–ª—é—á–µ–≤—ã–µ —Ö–∞–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã (–¥–æ 150 —Å–ª–æ–≤)`;

        try {
          console.log('üé≠ –¢—Ä–∏–∫—Å—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é...');
          
          await get().processAgentThought('trickster', chaosPrompt);
          
          console.log('‚úÖ –¢—Ä–∏–∫—Å—Ç–µ—Ä –≤–Ω–µ—Å —Ö–∞–æ—Å –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ');
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¢—Ä–∏–∫—Å—Ç–µ—Ä–∞:', error);
          set({ error: '–¢—Ä–∏–∫—Å—Ç–µ—Ä –Ω–µ —Å–º–æ–≥ –≤—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ —Ü–∏–∫–ª' });
          setTimeout(() => set({ error: null }), 5000);
        }
      },

      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–º
      pauseCycle: () => {
        console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ —Ü–∏–∫–ª–∞');
        set({ 
          isRunning: false, 
          isLoading: false,
          statusMessage: '‚è∏Ô∏è –¶–∏–∫–ª –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' 
        });
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          set({ statusMessage: null });
        }, 3000);
      },
      resumeCycle: () => set({ isRunning: true }),
      stopCycle: () => {
        const state = get();
        if (state.currentCycle) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
          const completedCycle = {
            ...state.currentCycle,
            endTime: Date.now(),
            synthesis: `–¶–∏–∫–ª ${state.currentCycle.number} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${state.currentCycle.thoughts.length} —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.`
          };
          
          console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏–∫–ª:', completedCycle);
          
          set((prevState) => {
            const newState = {
              ...prevState,
              cycleHistory: [...prevState.cycleHistory, completedCycle],
              currentCycle: null, 
              activeAgent: null, 
              isRunning: false 
            };
            saveToStorage(newState);
            return newState;
          });
        } else {
          set({ 
            currentCycle: null, 
            activeAgent: null, 
            isRunning: false 
          });
        }
      },

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
      setApiKey: (key: string) => {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á:', key ? '***—Å–∫—Ä—ã—Ç***' : '–ø—É—Å—Ç–æ–π');
        set((prevState) => {
          const newState = { ...prevState, apiKey: key };
          saveToStorage(newState);
          return newState;
        });
      },
      setAutoAdvance: (enabled: boolean) => {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ:', enabled);
        set((prevState) => {
          const newState = { ...prevState, autoAdvance: enabled };
          saveToStorage(newState);
          return newState;
        });
      },
      setCycleDelay: (delay: number) => {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É:', delay);
        set((prevState) => {
          const newState = { ...prevState, cycleDelay: delay };
          saveToStorage(newState);
          return newState;
        });
      },

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞–≥–µ–Ω—Ç–∞
      updateAgentModel: (role: AgentRole, modelId: string) => {
        console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –∞–≥–µ–Ω—Ç–∞ ${role}:`, modelId);
        set((prevState) => {
          const newState = {
            ...prevState,
            agents: {
              ...prevState.agents,
              [role]: {
                ...prevState.agents[role],
                model: modelId
              }
            }
          };
          saveToStorage(newState); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          return newState;
        });
      },

      // –°–±—Ä–æ—Å –º–æ–¥–µ–ª–µ–π –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
      resetAgentModels: () => {
        console.log('–°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º');
        set((prevState) => {
          const newState = {
          ...prevState,
          agents: defaultAgentConfigs
          };
          saveToStorage(newState);
          return newState;
        });
      },

      // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–î–ï–õ–Ø–ú–ò
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏
      addCustomModel: (model: AIModel) => {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å:', model.name);
        set((prevState) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å —Ç–∞–∫–∏–º ID –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          const existingModel = [...AVAILABLE_MODELS, ...prevState.customModels]
            .find(m => m.id === model.id);
          
          if (existingModel) {
            console.warn('–ú–æ–¥–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', model.id);
            return prevState;
          }

          const customModel: AIModel = {
            ...model,
            isCustom: true
          };

          const newState = {
            ...prevState,
            customModels: [...prevState.customModels, customModel]
          };
          
          saveToStorage(newState);
          return newState;
        });
      },

      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏
      removeCustomModel: (modelId: string) => {
        console.log('–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å:', modelId);
        set((prevState) => {
          const newState = {
            ...prevState,
            customModels: prevState.customModels.filter(m => m.id !== modelId)
          };
          
          saveToStorage(newState);
          return newState;
        });
      },

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
              getAllModels: () => {
          const state = get();
          return [...AVAILABLE_MODELS, ...state.customModels];
        },

        // –ü–†–ï–°–ï–¢–´ –ú–û–î–ï–õ–ï–ô
        applyModelPreset: (presetId: string) => {
          const preset = MODEL_PRESETS.find(p => p.id === presetId);
          if (!preset) {
            console.error('–ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', presetId);
            return;
          }

          set((prevState) => {
            const updatedAgents = { ...prevState.agents };
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞ –∫ –∫–∞–∂–¥–æ–º—É –∞–≥–µ–Ω—Ç—É
            Object.entries(preset.models).forEach(([role, modelId]) => {
              if (updatedAgents[role as AgentRole]) {
                updatedAgents[role as AgentRole] = {
                  ...updatedAgents[role as AgentRole],
                  model: modelId
                };
              }
            });

            const newState = {
              ...prevState,
              agents: updatedAgents
            };
            
            saveToStorage(newState);
            console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç "${preset.name}"`);
            return newState;
          });
        },

        getModelPresets: () => {
          return MODEL_PRESETS;
        },

        // –ù–ï–ü–†–ï–†–´–í–ù–´–ï –¶–ò–ö–õ–´
        startContinuousCycle: (userInput?: string) => {
          const state = get();
          
          if (userInput) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ—é —Ç–µ–º—É
            get().startCentralizedCycle(userInput);
          } else if (state.currentCycle?.synthesis) {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
            const lastSynthesis = state.currentCycle.synthesis;
            const newTopic = `–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: ${lastSynthesis.substring(0, 150)}...`;
            get().startCentralizedCycle(newTopic);
          } else {
            console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞');
          }
        },

        enableContinuousMode: (enabled: boolean) => {
          set((prevState) => {
            const newState = {
              ...prevState,
              continuousMode: enabled
            };
            saveToStorage(newState);
            console.log(`üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
            return newState;
          });
        },



        // –ù–û–í–´–ï –ú–ï–¢–û–î–´
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        updateAgentPrompt: (role: AgentRole, prompt: string) => {
          set((state) => {
            const updatedAgents = {
              ...state.agents,
              [role]: {
                ...state.agents[role],
                systemPrompt: prompt
              }
            };
            
            const newState = {
              ...state,
              agents: updatedAgents
            };
            
            saveToStorage(newState);
            console.log(`‚úÖ –ü—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞ ${state.agents[role].name} –æ–±–Ω–æ–≤–ª–µ–Ω`);
            return newState;
          });
        },

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
        addUserComment: (content: string) => {
          const state = get();
          
          if (!state.currentCycle) {
            console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
            return;
          }

          const userComment: UserComment = {
            id: `user-comment-${Date.now()}`,
            content: content.trim(),
            timestamp: Date.now(),
            cycleNumber: state.currentCycle.number,
            isUserComment: true
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
          set((state) => ({
            currentCycle: state.currentCycle ? {
              ...state.currentCycle,
              thoughts: [...state.currentCycle.thoughts, userComment as any] // TypeScript casting
            } : null
          }));

          console.log(`üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–∏–∫–ª #${state.currentCycle.number}`);
        },

        // –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Ü–∏–∫–ª
        insertUserInput: async (content: string) => {
          const state = get();
          
          if (!state.currentCycle) {
            console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞');
            return;
          }

          const userInput: AgentThought = {
            id: `user-input-${Date.now()}`,
            agentRole: 'observer',
            reasoning: '',
            essence: content,
            receivedContext: '',
            timestamp: Date.now(),
            cycleNumber: state.currentCycle.number,
            phase: 'divergence',
            confidence: 0.8
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–æ–¥ –≤ —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
          set((state) => ({
            currentCycle: state.currentCycle ? {
              ...state.currentCycle,
              thoughts: [...state.currentCycle.thoughts, userInput]
            } : null
          }));

          console.log(`üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–∏–∫–ª #${state.currentCycle.number}`);
        },

        // –ú–ï–¢–û–î–´ –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø

        // –§–∞–∑–∞ 1: –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á–∏
        processObserverAnalysis: async (topic: string) => {
          const state = get();
          console.log('üîç processObserverAnalysis –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–º–æ–π:', topic);
          console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:', {
            hasCurrentCycle: !!state.currentCycle,
            hasApiKey: !!state.apiKey,
            isRunning: state.isRunning
          });
          
          if (!state.currentCycle || !state.apiKey) {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç currentCycle –∏–ª–∏ apiKey');
            return;
          }

          set((prevState) => ({
            ...prevState,
            currentCycle: prevState.currentCycle ? {
              ...prevState.currentCycle,
              cyclePhase: 'analysis'
            } : null
          }));

          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è)
          console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤:');
          Object.entries(state.agents).forEach(([role, agent]) => {
            console.log(`  ${role}: ${agent.name} - –∞–∫—Ç–∏–≤–µ–Ω: ${agent.isActive}`);
          });
          
          const activeAgentRoles = Object.entries(state.agents)
            .filter(([role, agent]) => agent.isActive && role !== 'observer')
            .map(([role]) => role as AgentRole);

          console.log('üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã (–∏—Å–∫–ª—é—á–∞—è observer):', activeAgentRoles);
          console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:', activeAgentRoles.length);

          if (activeAgentRoles.length === 0) {
            console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            set({ isRunning: false, error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.' });
            return;
          }

          console.log('üîç –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è');
          console.log('üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:', activeAgentRoles.map(role => state.agents[role].name).join(', '));

          const observerPrompt = `${state.agents.observer.systemPrompt}

–¢–ï–ú–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê: "${topic}"

–î–û–°–¢–£–ü–ù–´–ï –ê–ö–¢–ò–í–ù–´–ï –ê–ì–ï–ù–¢–´:
${activeAgentRoles.map(role => `- ${state.agents[role].name} (${role}): ${state.agents[role].description}`).join('\n')}

[–ê–ù–ê–õ–ò–ó –ò –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï]
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ê–ö–¢–ò–í–ù–û–ú–£ –∞–≥–µ–Ω—Ç—É.

[–ó–ê–î–ê–ù–ò–Ø –î–õ–Ø –ê–ì–ï–ù–¢–û–í]
${activeAgentRoles.map(role => `${role.toUpperCase()}_–ó–ê–î–ê–ù–ò–ï: (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è ${state.agents[role].name})`).join('\n')}

[–ö–û–û–†–î–ò–ù–ê–¶–ò–Ø]
–û–±—ä—è—Å–Ω–∏ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.`;

          console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—é...');
          console.log('ü§ñ –ú–æ–¥–µ–ª—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è:', state.agents.observer.model);

          try {
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—é —Å retry –ª–æ–≥–∏–∫–æ–π...');
            set({ statusMessage: 'ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—é...' });
            
            const response = await makeAPIRequestWithRetry('https://openrouter.ai/api/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${state.apiKey}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': getOrigin(),
                'X-Title': 'NeuroAgent'
              },
              body: JSON.stringify({
                model: state.agents.observer.model,
                messages: [{ role: 'user', content: observerPrompt }],
                max_tokens: 6000, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                temperature: 0.7
              })
            }, 5, 3000); // 5 –ø–æ–ø—ã—Ç–æ–∫, –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã

            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—è');
            set({ statusMessage: '‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è...' });

            const data = await response.json();
            const analysisResult = data.choices[0].message.content;
            
            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', analysisResult.length);
            console.log('üìä –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', analysisResult.substring(0, 200) + '...');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
            set((prevState) => {
              if (!prevState.currentCycle) return prevState;
              return {
                ...prevState,
                currentCycle: {
                  ...prevState.currentCycle,
                  intermediateOutput: analysisResult,
                  activeAgents: activeAgentRoles,
                  cyclePhase: 'execution'
                }
              };
            });

            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–∑—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
            set({ statusMessage: '‚ö° –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...' });
            setTimeout(() => {
              get().executeAgentTasks();
            }, 1000);

          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—è:', error);
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–º—ã: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), isRunning: false });
          }
        },

        // –§–∞–∑–∞ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–∞–º–∏
        executeAgentTasks: async () => {
          const state = get();
          if (!state.currentCycle || !state.apiKey) return;

          const { activeAgents, intermediateOutput } = state.currentCycle;
          if (!activeAgents || activeAgents.length === 0) {
            console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
            return;
          }

          console.log('‚ö° –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–∞–º–∏ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏');

          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
          const agentTasks: { [key: string]: string } = {};
          
          for (const agentRole of activeAgents) {
            const taskPattern = new RegExp(`${agentRole.toUpperCase()}_–ó–ê–î–ê–ù–ò–ï[:\\s]*(.*?)(?=\\n[A-Z_]+_–ó–ê–î–ê–ù–ò–ï|\\[|$)`, 'is');
            const match = intermediateOutput?.match(taskPattern);
            agentTasks[agentRole] = match ? match[1].trim() : `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É "${state.currentCycle.topic}" —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è ${state.agents[agentRole].name}`;
          }

          // –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
          const workingAgents: AgentRole[] = [];
          const failedAgents: AgentRole[] = [];
          
          for (let i = 0; i < activeAgents.length; i++) {
            const agentRole = activeAgents[i];
            const task = agentTasks[agentRole];
            
            console.log(`ü§ñ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ ${state.agents[agentRole].name} (${i + 1}/${activeAgents.length})`);
            console.log('–ó–∞–¥–∞–Ω–∏–µ:', task.substring(0, 100) + '...');
            set({ statusMessage: `ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ${state.agents[agentRole].name} (${i + 1}/${activeAgents.length})` });
            
            try {
              await get().processAgentThought(agentRole, task);
              workingAgents.push(agentRole);
              console.log(`‚úÖ –ê–≥–µ–Ω—Ç ${state.agents[agentRole].name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É`);
              
              // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limits
              if (i < activeAgents.length - 1) {
                const delay = 2000 + Math.random() * 1000; // 2-3 —Å–µ–∫—É–Ω–¥—ã —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ ${Math.round(delay)}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–≥–µ–Ω—Ç–æ–º`);
                set({ statusMessage: `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(delay/1000)} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–≥–µ–Ω—Ç–æ–º...` });
                await new Promise(resolve => setTimeout(resolve, delay));
              }
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —É –∞–≥–µ–Ω—Ç–∞ ${agentRole}:`, error);
              failedAgents.push(agentRole);
              
              // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
              if (i < activeAgents.length - 1) {
                console.log('‚è≥ –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
                set({ statusMessage: '‚è≥ –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫...' });
                await new Promise(resolve => setTimeout(resolve, 5000));
              }
            }
          }

          // –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—è
          if (workingAgents.length < activeAgents.length / 2) {
            console.log(`‚ö†Ô∏è –¢–æ–ª—å–∫–æ ${workingAgents.length}/${activeAgents.length} –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç. –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—è.`);
            set({ statusMessage: 'ü§ñ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—è...' });
            
            const compensationPrompt = `
–ö–û–ú–ü–ï–ù–°–ê–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó

–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ–¥–∏ —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç –∏—Ö –∏–º–µ–Ω–∏:

–ù–ï–†–ê–ë–û–¢–ê–Æ–©–ò–ï –ê–ì–ï–ù–¢–´: ${failedAgents.map(role => state.agents[role].name).join(', ')}

–ò–°–•–û–î–ù–ê–Ø –¢–ï–ú–ê: "${state.currentCycle.topic}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (400-600 —Å–ª–æ–≤).
            `;
            
            try {
              await get().processAgentThought('observer', compensationPrompt);
              console.log('‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
            }
          }

          console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${workingAgents.length} —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö, ${failedAgents.length} –Ω–µ—É–¥–∞—á–Ω—ã—Ö`);
          set({ statusMessage: `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${workingAgents.length}/${activeAgents.length}), –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ç–µ–∑–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫...` });
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ü–∏–∫–ª–æ–≤
          if (failedAgents.length > 0) {
            console.log(`üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤: ${failedAgents.map(role => state.agents[role].name).join(', ')}`);
            failedAgents.forEach(role => {
              get().updateAgentActivity(role, false);
            });
            set({ statusMessage: `üîß –û—Ç–∫–ª—é—á–µ–Ω—ã –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã: ${failedAgents.length}` });
          }
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–∑—É —Å–∏–Ω—Ç–µ–∑–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
          setTimeout(() => {
            get().processObserverSynthesis();
          }, 3000);
        },

        // –§–∞–∑–∞ 3: –°–∏–Ω—Ç–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–º
        processObserverSynthesis: async () => {
          const state = get();
          if (!state.currentCycle || !state.apiKey) return;

          set((prevState) => ({
            ...prevState,
            currentCycle: prevState.currentCycle ? {
              ...prevState.currentCycle,
              cyclePhase: 'synthesis'
            } : null
          }));

          console.log('üîÑ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');

          // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
          const agentResults = state.currentCycle.thoughts
            .filter(t => t.agentRole !== 'observer' && t.cycleNumber === state.currentCycle!.number)
            .sort((a, b) => a.timestamp - b.timestamp);

          if (agentResults.length === 0) {
            console.log('‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞');
            set({ isRunning: false, error: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞' });
            return;
          }

          const synthesisPrompt = `${state.agents.observer.systemPrompt}

–ò–°–•–û–î–ù–ê–Ø –¢–ï–ú–ê: "${state.currentCycle.topic}"

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ê–ì–ï–ù–¢–û–í:
${agentResults.map(t => 
  `${state.agents[t.agentRole].name}:\n–ê–ù–ê–õ–ò–ó: ${t.reasoning}\n–í–´–í–û–î–´: ${t.essence}`
).join('\n\n---\n\n')}

[–§–ò–ù–ê–õ–¨–ù–´–ô –°–ò–ù–¢–ï–ó]
–°–æ–∑–¥–∞–π –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–∏–Ω—Ç–µ–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã.

[–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò]
–ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.`;

          try {
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∏–Ω—Ç–µ–∑ —Å retry –ª–æ–≥–∏–∫–æ–π...');
            set({ statusMessage: 'üîÑ –ò–ò-–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...' });
            
            const response = await makeAPIRequestWithRetry('https://openrouter.ai/api/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${state.apiKey}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': getOrigin(),
                'X-Title': 'NeuroAgent'
              },
              body: JSON.stringify({
                model: state.agents.observer.model,
                messages: [{ role: 'user', content: synthesisPrompt }],
                max_tokens: 4000, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
                temperature: 0.7
              })
            }, 5, 3000); // 5 –ø–æ–ø—ã—Ç–æ–∫, –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã

            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–∏–Ω—Ç–µ–∑');

            const data = await response.json();
            const synthesis = data.choices[0].message.content;

            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
            const synthesisTought: AgentThought = {
              id: `synthesis-${Date.now()}`,
              agentRole: 'observer',
              reasoning: synthesis,
              essence: synthesis.substring(0, 5000), // –°—É—Ç—å –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
              timestamp: Date.now(),
              cycleNumber: state.currentCycle.number,
              phase: 'convergence',
              confidence: 0.9
            };

            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
            set((prevState) => {
              if (!prevState.currentCycle) return prevState;
              
              const completedCycle = {
                ...prevState.currentCycle,
                thoughts: [...prevState.currentCycle.thoughts, synthesisTought],
                synthesis: synthesis,
                isComplete: true,
                endTime: Date.now(),
                cyclePhase: 'waiting' as const
              };

              const newState = {
                ...prevState,
                currentCycle: completedCycle,
                isRunning: false,
                cycleHistory: [...prevState.cycleHistory, completedCycle]
              };
              
              saveToStorage(newState);
              console.log('üéâ –¶–∏–∫–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é');
              
              // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í –ù–ï–ü–†–ï–†–´–í–ù–û–ú –†–ï–ñ–ò–ú–ï
              if (prevState.continuousMode) {
                console.log('üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω - –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã');
                setTimeout(() => {
                  const lastEssence = synthesisTought.essence;
                  const newTopic = `–†–∞–∑–≤–∏—Ç–∏–µ –∏–¥–µ–π: ${lastEssence.substring(0, 100)}...`;
                  get().startCentralizedCycle(newTopic);
                }, 3000);
              } else {
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                setTimeout(() => {
                  set({ statusMessage: null });
                }, 2000);
              }
              
              return newState;
            });

          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            set({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', isRunning: false });
          }
        },

        suggestContinuation: async () => {
          const state = get();
          if (!state.currentCycle || !state.apiKey) return;

          try {
            const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

–¢–ï–ú–ê: ${state.currentCycle.topic}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:
${state.currentCycle.thoughts.map(thought => 
  `${thought.agentRole}: ${thought.essence || thought.reasoning || '–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ'}`
).join('\n\n')}

${state.currentCycle.intermediateOutput ? `–ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ô –í–´–í–û–î:\n${state.currentCycle.intermediateOutput}\n\n` : ''}

–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (200-300 —Å–ª–æ–≤):
1. –ö–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞?
2. –ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤–æ–∑–Ω–∏–∫–ª–∏?
3. –ö–∞–∫–∏–µ —Å–≤—è–∑–∏ –º–æ–∂–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥–ª—É–±–∂–µ?
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.
            `;

            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${state.apiKey}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': getOrigin(),
                'X-Title': 'NeuroAgent'
              },
              body: JSON.stringify({
                model: 'anthropic/claude-3.5-sonnet',
                messages: [{ role: 'user', content: prompt }],
                max_tokens: 1500,
                temperature: 0.8
              })
            });

            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            const continuationSuggestion = data.choices[0].message.content;

            set((prevState) => {
              if (!prevState.currentCycle) return prevState;
              const newState = {
                ...prevState,
                currentCycle: {
                  ...prevState.currentCycle,
                  continuationSuggestion: continuationSuggestion,
                  canContinue: true
                }
              };
              saveToStorage(newState);
              return newState;
            });

          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', error);
          }
        },

        startContinuationCycle: (suggestion: string) => {
          const state = get();
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
          const topicMatch = suggestion.match(/(?:–Ω–æ–≤—ã–π —Ü–∏–∫–ª|—Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª|–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ|–∞–Ω–∞–ª–∏–∑).*?[:-]?\s*["¬´]?([^"¬´\n]+)["¬ª]?/i);
          let newTopic = topicMatch ? topicMatch[1].trim() : suggestion.split('\n')[0];
          
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ç–µ–º—ã
          if (!newTopic || newTopic.length < 10) {
            newTopic = `–£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: ${state.currentCycle?.topic || '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'}`;
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –≤ –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
          if (state.currentCycle && !state.cycleHistory.find(c => c.id === state.currentCycle!.id)) {
            set((prevState) => ({
              ...prevState,
              cycleHistory: [...prevState.cycleHistory, {
                ...prevState.currentCycle!,
                isComplete: true,
                timestamp: Date.now()
              }]
            }));
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
          get().startCentralizedCycle(newTopic);
        },

        // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê–ú–ò
        updateAgentActivity: (role: AgentRole, isActive: boolean) => {
          set((prevState) => {
            const updatedAgents = {
              ...prevState.agents,
              [role]: {
                ...prevState.agents[role],
                isActive: isActive
              }
            };
            const newState = {
              ...prevState,
              agents: updatedAgents
            };
            saveToStorage(newState);
            console.log(`üîÑ –ê–≥–µ–Ω—Ç ${prevState.agents[role].name} ${isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`);
            return newState;
          });
        },

        addCustomAgent: (agentConfig: Omit<AgentConfig, 'role'> & { role: string }) => {
          set((prevState) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º role –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (prevState.agents[agentConfig.role as AgentRole]) {
              console.warn('–ê–≥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º role —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', agentConfig.role);
              return prevState;
            }

            const newAgent: AgentConfig = {
              ...agentConfig,
              role: agentConfig.role as AgentRole,
              receivesFrom: 'observer',
              sendsTo: 'observer',
              isActive: true
            };

            const updatedAgents = {
              ...prevState.agents,
              [agentConfig.role]: newAgent
            };

            const newState = {
              ...prevState,
              agents: updatedAgents
            };
            
            saveToStorage(newState);
            console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç: ${newAgent.name} (${newAgent.role})`);
            return newState;
          });
        },

        removeCustomAgent: (role: string) => {
          set((prevState) => {
            // –ó–∞—â–∏—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
            const protectedRoles = ['observer', 'geometer', 'physicist', 'perceptive', 'philosopher', 'integrator', 'trickster'];
            if (protectedRoles.includes(role)) {
              console.warn('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:', role);
              return prevState;
            }

            const newAgents = { ...prevState.agents };
            delete newAgents[role as AgentRole];

            const newState = {
              ...prevState,
              agents: newAgents
            };
            
            saveToStorage(newState);
            console.log(`‚ûñ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç: ${role}`);
            return newState;
          });
        },

        // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ü–∏–∫–ª–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        finalizeCycle: () => {
          const state = get();
          if (state.currentCycle) {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–Ω—Ç–µ–∑ –æ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
            const observerSynthesis = state.currentCycle.thoughts
              .filter(t => t.agentRole === 'observer')
              .sort((a, b) => b.timestamp - a.timestamp)[0];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
            const completedCycle = {
              ...state.currentCycle,
              endTime: Date.now(),
              isComplete: true,
              synthesis: observerSynthesis?.essence || state.currentCycle.intermediateOutput || `–¶–∏–∫–ª ${state.currentCycle.number} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${state.currentCycle.thoughts.length} —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –†–∞—É–Ω–¥–æ–≤: ${state.currentCycle.totalRounds}.`
            };
            
            console.log('–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏–∫–ª:', completedCycle);
            
            set((prevState) => {
              const newState = {
                ...prevState,
                cycleHistory: [...prevState.cycleHistory, completedCycle],
                currentCycle: null, 
                activeAgent: null, 
                isRunning: false 
              };
              saveToStorage(newState);
              return newState;
            });
          } else {
            set({ 
              currentCycle: null, 
              activeAgent: null, 
              isRunning: false 
            });
          }
        }
    };
  },
    {
      name: 'mindloop-store'
    }
  )
); 